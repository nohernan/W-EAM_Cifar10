#! /bin/bash

# Copyright [2021] Rafael Morales Gamboa, Noé S. Hernández Sánchez,
# Carlos Ricardo Cruz Mendoza, Victor D. Cruz González, and
# Luis Alberto Pineda Cortés.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#############
## This script produces a matrix of all symbol classes in the alphabet 
## generated by the ARMs at different leves of entropy. The first row is 
## the original image that is the input of the analysis module, the second 
## row is the output of the synthesis module when taking as input the ouput
## of the analysis module, the remaining rows are the corresponding images 
## constructed by the AMRs at eight increasing leves of entropy.

#############
## Notes:
# Argument 1 (mandatory) is the name of a file text with the chosen
#    images expressed as pairs of label and image id, separated
#    by a comma without spaces.

##
## Setting variables
##
domain='1024'
msz='16'
fixed_sgm='0.04'
##
runs_dir="runs-${domain}"
imag_dir="${runs_dir}/images"
##
test_dir="${imag_dir}/test"
mems_dir="${imag_dir}/memories-msz_$(printf "%03d" $msz)"
dream_dir="${imag_dir}/dreams-msz_$(printf "%03d" $msz)-sgm_$(printf "%05.3f" $fixed_sgm)-dph"
dream_noised_dir="${imag_dir}/dreams-noised-msz_$(printf "%03d" $msz)-sgm_$(printf "%05.3f" $fixed_sgm)-dph"
##
random_dir=`basename $1 .csv`
random_dir="${imag_dir}/${random_dir}-images-grid"
random_dir_tmp="${random_dir}/tmp"
##
if [ ! -d ${random_dir}  ]; then
    mkdir -p ${random_dir}
fi
##
if [ ! -d ${random_dir_tmp}  ]; then
    mkdir -p ${random_dir_tmp}
fi
##
class_matrix=("dog dog dog deer frog frog frog frog"
"auto auto auto auto auto truck frog frog"
"cat cat cat cat truck truck frog truck"
"deer deer deer deer deer deer frog frog"
"bird bird bird frog frog frog truck dog"
"ship ship ship deer ship truck truck truck"
"truck truck truck truck truck truck truck truck"
"horse horse horse horse deer frog deer frog"
"airplane airplane airplane airplane airplane deer truck ship"
"frog frog frog frog frog frog frog frog")
##
class_noised_matrix=("dog deer - - - - - -"
"auto auto auto truck frog frog frog frog"
"cat truck truck truck truck truck frog truck"
"deer deer deer deer deer frog frog frog"
"bird deer deer frog deer frog frog dog"
"ship frog frog frog frog frog frog truck"
"truck truck truck truck truck truck truck truck"
"horse horse horse horse frog deer frog frog"
"airplane airplane airplane airplane airplane airplane truck airplane"
"frog frog frog frog frog frog frog frog")
##
dream_matrix=("dog dog frog frog frog frog frog frog"
"auto auto auto truck truck truck - -"
"cat cat truck truck truck truck truck truck"
"deer deer deer frog frog frog frog frog"
"bird bird frog frog frog frog frog frog"
"ship ship ship frog deer deer ship ship"
"truck truck truck truck truck frog truck frog"
"horse horse deer deer deer deer deer frog"
"airplane airplane airplane deer airplane airplane airplane airplane"
"frog frog frog frog frog frog frog -")
##
dream_noised_matrix=("dog deer - - - - - -"
"auto auto truck truck truck - - -"
"cat truck truck truck truck truck truck truck"
"deer deer frog frog frog frog frog dog"
"bird deer frog frog frog frog frog frog"
"ship frog frog frog frog truck airplane -"
"truck truck truck truck truck frog frog frog"
"horse horse deer cat cat dog cat deer"
"airplane airplane airplane airplane airplane airplane deer horse"
"frog frog frog frog frog frog frog frog")
##

pair_fn=$1

fold=0
for i in `cat $pair_fn`; do 
    IFS=',' read class id <<< "${i}"
    ##
    IFS=' ' read -r -a rowdata <<< "${class_matrix[$fold]}"
    ##
    IFS=' ' read -r -a rowdata_noised <<< "${class_noised_matrix[$fold]}"
    ##
    IFS=' ' read -r -a rowdata_dream <<< "${dream_matrix[$fold]}"
    ##
    IFS=' ' read -r -a rowdata_dream_noised <<< "${dream_noised_matrix[$fold]}"
    ##
    
    join_imgs="${random_dir_tmp}/${class}_${id}-join.png"
    join_noised_imgs="${random_dir_tmp}/${class}_${id}-noised_join.png"	

    dig_fn="${class}_$(printf "%05d" $id)"
    fold_fn="$(printf "%03d" $fold)"
    ############################################################
    ##    
    random_dir_original="${random_dir}/original"
    if [ ! -d ${random_dir_original} ];
    then
	mkdir -p ${random_dir_original}
    fi
    ##
    col=0
    original_img="${test_dir}/${dig_fn}-ori-fld_${fold_fn}.png "
    cp $original_img $random_dir_original
    text_filename="${random_dir_tmp}/class_text_${fold}${col}.png "
    convert -background white -size 32x11 -pointsize 9 -gravity center label:${rowdata[$col]} ${text_filename}
    original_img+=${text_filename}
    ##
    noised_img="${test_dir}/${dig_fn}-noised-fld_${fold_fn}.png "
    cp $noised_img $random_dir_original
    text_filename="${random_dir_tmp}/class_text_noised_${fold}${col}.png "
    convert -background white -size 32x11 -pointsize 9 -gravity center label:${rowdata_noised[$col]} ${text_filename}
    noised_img+=${text_filename}
    ##
    ############################################################
    ##    
    random_dir_ae="${random_dir}/autoencoder"
    if [ ! -d ${random_dir_ae} ];
    then
	mkdir -p ${random_dir_ae}
    fi
    ##
    col=1
    testing_img="${test_dir}/${dig_fn}-testing-fld_${fold_fn}.png "
    cp $testing_img $random_dir_ae
    text_filename="${random_dir_tmp}/class_text_${fold}${col}.png "
    convert -background white -size 32x11 -pointsize 9 -gravity center label:${rowdata[$col]} ${text_filename}
    testing_img+=${text_filename}
    ##
    prod_noised_img="${test_dir}/${dig_fn}-prod_noised-fld_${fold_fn}.png "
    cp $prod_noised_img $random_dir_ae
    text_filename="${random_dir_tmp}/class_text_noised_${fold}${col}.png "
    convert -background white -size 32x11 -pointsize 9 -gravity center label:${rowdata_noised[$col]} ${text_filename}
    prod_noised_img+=${text_filename}

    memories_imgs=""
    memories_noised_imgs=""
    ##
    col=2
    for sgm in {0.01,0.03,0.05,0.07,0.09,0.11};do
	random_dir_sigma="${random_dir}/memory_sigma_${sgm}"
	if [ ! -d ${random_dir_sigma} ];
	then
	    mkdir -p ${random_dir_sigma}
	fi
	##
	memories_imgs+="${mems_dir}-sgm_$(printf "%05.3f" $sgm)/${dig_fn}-memory-fld_${fold_fn}.png "
	cp ${mems_dir}-sgm_$(printf "%05.3f" $sgm)/${dig_fn}-memory-fld_${fold_fn}.png $random_dir_sigma
	text_filename="${random_dir_tmp}/class_text_${fold}${col}.png "
	convert -background white -size 32x11 -pointsize 9 -gravity center label:${rowdata[$col]} ${text_filename}
	memories_imgs+=${text_filename}
	##
	memories_noised_imgs+="${mems_dir}-sgm_$(printf "%05.3f" $sgm)/${dig_fn}-noised-fld_${fold_fn}.png "
	cp ${mems_dir}-sgm_$(printf "%05.3f" $sgm)/${dig_fn}-noised-fld_${fold_fn}.png $random_dir_sigma
	text_filename="${random_dir_tmp}/class_text_noised_${fold}${col}.png "
	convert -background white -size 32x11 -pointsize 9 -gravity center label:${rowdata_noised[$col]} ${text_filename}
	memories_noised_imgs+=${text_filename}
	##
	col=$((col+1))
    done

    ##
    echo "Images and classes drawn from memory using original images"
    echo $memories_imgs
    convert ${original_img} ${testing_img} $(echo $memories_imgs) -bordercolor white -border 1 -append $join_imgs
    echo ''
    ##
    echo "images and classes drawn from memory using noised images"
    echo $memories_noised_imgs
    convert ${noised_img} ${prod_noised_img} $(echo $memories_noised_imgs) -bordercolor white -border 1 -append $join_noised_imgs
    echo ''

    ##
    ##
    ## Dreamed images
    ##
    ##
    join_dream_imgs="${random_dir_tmp}/${class}_${id}-dream_join.png"
    join_dream_noised_imgs="${random_dir_tmp}/${class}_${id}-dreamnoised_join.png"
    ##
    dph=0
    original_dream_img="${test_dir}/${dig_fn}-ori-fld_${fold_fn}.png "
    text_filename="${random_dir_tmp}/class_text_dream_${fold}${dph}.png "
    convert -background white -size 32x11 -pointsize 9 -gravity center label:${rowdata_dream[$dph]} ${text_filename}
    original_dream_img+=${text_filename}
    #
    dream_noised_img="${test_dir}/${dig_fn}-noised-fld_${fold_fn}.png "
    text_filename="${random_dir_tmp}/class_text_dream_noised_${fold}${dph}.png "
    convert -background white -size 32x11 -pointsize 9 -gravity center label:${rowdata_dream_noised[$dph]} ${text_filename}
    dream_noised_img+=${text_filename}
    ##
    ##
    dph=1
    testing_dream_img="${test_dir}/${dig_fn}-testing-fld_${fold_fn}.png "
    text_filename="${random_dir_tmp}/class_text_dream_${fold}${dph}.png "
    convert -background white -size 32x11 -pointsize 9 -gravity center label:${rowdata_dream[$dph]} ${text_filename}
    testing_dream_img+=${text_filename}
    ##
    prod_dream_noised_img="${test_dir}/${dig_fn}-prod_noised-fld_${fold_fn}.png "
    text_filename="${random_dir_tmp}/class_text_dream_noised_${fold}${dph}.png "
    convert -background white -size 32x11 -pointsize 9 -gravity center label:${rowdata_dream_noised[$dph]} ${text_filename}
    prod_dream_noised_img+=${text_filename}
    ##

    dream_imgs=""
    dream_noised_imgs=""
    
    for dph in {0,1,2,3,4,5};do
	random_dir_dph="${random_dir}/dream_depth_${dph}"
	if [ ! -d ${random_dir_dph} ];
	then
	    mkdir -p ${random_dir_dph}
	fi
	##
	dph_idx=$((dph+2))
	#
	dream_imgs+="${dream_dir}_$(printf "%03d" $dph)/${dig_fn}-memory-fld_${fold_fn}.png "
	cp ${dream_dir}_$(printf "%03d" $dph)/${dig_fn}-memory-fld_${fold_fn}.png $random_dir_dph
	text_filename="${random_dir_tmp}/class_text_dream_${fold}${dph_idx}.png "
	convert -background white -size 32x11 -pointsize 9 -gravity center label:${rowdata_dream[dph_idx]} ${text_filename}
	dream_imgs+=${text_filename}
	#
	dream_noised_imgs+="${dream_noised_dir}_$(printf "%03d" $dph)/${dig_fn}-memory-fld_${fold_fn}.png "
	cp ${dream_noised_dir}_$(printf "%03d" $dph)/${dig_fn}-memory-fld_${fold_fn}.png "${random_dir_dph}/${dig_fn}-memory-fld_${fold_fn}_noised.png"
	text_filename="${random_dir_tmp}/class_text_dream_noised_${fold}${dph_idx}.png "
	convert -background white -size 32x11 -pointsize 9 -gravity center label:${rowdata_dream_noised[dph_idx]} ${text_filename}
	dream_noised_imgs+=${text_filename}

    done
    ##
    echo "Images and classes drawn from memory using original dream images"
    echo $dream_imgs
    convert ${original_dream_img} ${testing_dream_img} $(echo $dream_imgs) -bordercolor white -border 1 -append $join_dream_imgs
    echo ''
    ##
    echo "Images and classes drawn from memory using original dream noised images"
    echo $dream_noised_imgs
    convert ${dream_noised_img} ${prod_dream_noised_img} $(echo $dream_noised_imgs) -bordercolor white -border 1 -append $join_dream_noised_imgs
    echo ''
    ##
    fold=$((fold+1))
done

join_imgs=`find ${random_dir_tmp} -type f -name '*-join.png' -print| sort`
final_img=${random_dir}/'all_sigmas.png'
convert $(echo $join_imgs) -bordercolor white +append ${final_img}

join_noised_imgs=`find ${random_dir_tmp} -type f -name '*-noised_join.png' -print| sort`
final_img=${random_dir}/'all_noised_sigmas.png'
convert $(echo $join_noised_imgs) -bordercolor white +append ${final_img}

join_dream_imgs=`find ${random_dir_tmp} -type f -name '*-dream_join.png' -print| sort`
final_img=${random_dir}/'all_dream_depth.png'
convert $(echo $join_dream_imgs) -bordercolor white +append ${final_img}

join_dream_noised_imgs=`find ${random_dir_tmp} -type f -name '*-dreamnoised_join.png' -print| sort`
final_img=${random_dir}/'all_dream_noised_depth.png'
convert $(echo $join_dream_noised_imgs) -bordercolor white +append ${final_img}

echo "rm -rf ${random_dir_tmp}"
rm -rf ${random_dir_tmp}
# mogrify -scale '1000%' ${final_img}

